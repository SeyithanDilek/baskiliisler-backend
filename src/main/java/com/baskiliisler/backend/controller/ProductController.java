package com.baskiliisler.backend.controller;

import com.baskiliisler.backend.dto.ProductRequestDto;
import com.baskiliisler.backend.dto.ProductResponseDto;
import com.baskiliisler.backend.dto.ProductUpdateDto;
import com.baskiliisler.backend.mapper.ProductMapper;
import com.baskiliisler.backend.service.ProductService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/products")
@RequiredArgsConstructor
@Tag(name = "üõçÔ∏è Product Management", description = "√úr√ºn y√∂netimi API'leri")
public class ProductController {

    private final ProductService productService;

    @PostMapping
    @Operation(summary = "Yeni √ºr√ºn olu≈ütur", description = "Yeni bir √ºr√ºn olu≈üturur")
    public ResponseEntity<ProductResponseDto> createProduct(@RequestBody @Valid ProductRequestDto dto) {
        var product = productService.createProduct(dto);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(ProductMapper.toResponseDto(product));
    }

    @GetMapping
    @Operation(summary = "T√ºm √ºr√ºnleri listele", description = "Sistemdeki t√ºm √ºr√ºnleri listeler")
    public List<ProductResponseDto> getAllProducts() {
        return productService.getAllProducts().stream()
                .map(ProductMapper::toResponseDto)
                .toList();
    }

    @GetMapping("/active")
    @Operation(summary = "Aktif √ºr√ºnleri listele", description = "Sadece aktif √ºr√ºnleri listeler")
    public List<ProductResponseDto> getActiveProducts() {
        return productService.getActiveProducts().stream()
                .map(ProductMapper::toResponseDto)
                .toList();
    }

    @GetMapping("/{id}")
    @Operation(summary = "ID ile √ºr√ºn getir", description = "Belirtilen ID'ye sahip √ºr√ºn√º getirir")
    public ProductResponseDto getById(@PathVariable Long id) {
        return productService.findById(id);
    }

    @GetMapping("/code/{code}")
    @Operation(summary = "Kod ile √ºr√ºn getir", description = "Belirtilen koda sahip √ºr√ºn√º getirir")
    public ProductResponseDto getByCode(@PathVariable String code) {
        return productService.findByCode(code);
    }

    @PatchMapping("/{id}")
    @Operation(summary = "√úr√ºn g√ºncelle", description = "Belirtilen ID'ye sahip √ºr√ºn√º g√ºnceller")
    public ProductResponseDto updateProduct(@PathVariable Long id,
                                          @RequestBody @Valid ProductUpdateDto dto) {
        return productService.updateProduct(id, dto);
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "√úr√ºn sil", description = "Belirtilen ID'ye sahip √ºr√ºn√º siler")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
    }

    @PatchMapping("/{id}/deactivate")
    @Operation(summary = "√úr√ºn√º pasifle≈ütir", description = "Belirtilen ID'ye sahip √ºr√ºn√º pasifle≈ütirir")
    public ProductResponseDto deactivateProduct(@PathVariable Long id) {
        productService.deactivateProduct(id);
        return productService.findById(id);
    }

    @PatchMapping("/{id}/activate")
    @Operation(summary = "√úr√ºn√º aktifle≈ütir", description = "Belirtilen ID'ye sahip √ºr√ºn√º aktifle≈ütirir")
    public ProductResponseDto activateProduct(@PathVariable Long id) {
        productService.activateProduct(id);
        return productService.findById(id);
    }
} 